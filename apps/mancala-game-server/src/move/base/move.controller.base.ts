/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MoveService } from "../move.service";
import { MoveCreateInput } from "./MoveCreateInput";
import { Move } from "./Move";
import { MoveFindManyArgs } from "./MoveFindManyArgs";
import { MoveWhereUniqueInput } from "./MoveWhereUniqueInput";
import { MoveUpdateInput } from "./MoveUpdateInput";

export class MoveControllerBase {
  constructor(protected readonly service: MoveService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Move })
  async createMove(@common.Body() data: MoveCreateInput): Promise<Move> {
    return await this.service.createMove({
      data: {
        ...data,

        pit: data.pit
          ? {
              connect: data.pit,
            }
          : undefined,

        player: data.player
          ? {
              connect: data.player,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        pit: {
          select: {
            id: true,
          },
        },

        player: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Move] })
  @ApiNestedQuery(MoveFindManyArgs)
  async moves(@common.Req() request: Request): Promise<Move[]> {
    const args = plainToClass(MoveFindManyArgs, request.query);
    return this.service.moves({
      ...args,
      select: {
        createdAt: true,
        id: true,

        pit: {
          select: {
            id: true,
          },
        },

        player: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Move })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async move(
    @common.Param() params: MoveWhereUniqueInput
  ): Promise<Move | null> {
    const result = await this.service.move({
      where: params,
      select: {
        createdAt: true,
        id: true,

        pit: {
          select: {
            id: true,
          },
        },

        player: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Move })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMove(
    @common.Param() params: MoveWhereUniqueInput,
    @common.Body() data: MoveUpdateInput
  ): Promise<Move | null> {
    try {
      return await this.service.updateMove({
        where: params,
        data: {
          ...data,

          pit: data.pit
            ? {
                connect: data.pit,
              }
            : undefined,

          player: data.player
            ? {
                connect: data.player,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          pit: {
            select: {
              id: true,
            },
          },

          player: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Move })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMove(
    @common.Param() params: MoveWhereUniqueInput
  ): Promise<Move | null> {
    try {
      return await this.service.deleteMove({
        where: params,
        select: {
          createdAt: true,
          id: true,

          pit: {
            select: {
              id: true,
            },
          },

          player: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
