/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Move } from "./Move";
import { MoveCountArgs } from "./MoveCountArgs";
import { MoveFindManyArgs } from "./MoveFindManyArgs";
import { MoveFindUniqueArgs } from "./MoveFindUniqueArgs";
import { CreateMoveArgs } from "./CreateMoveArgs";
import { UpdateMoveArgs } from "./UpdateMoveArgs";
import { DeleteMoveArgs } from "./DeleteMoveArgs";
import { Pit } from "../../pit/base/Pit";
import { Player } from "../../player/base/Player";
import { MoveService } from "../move.service";
@graphql.Resolver(() => Move)
export class MoveResolverBase {
  constructor(protected readonly service: MoveService) {}

  async _movesMeta(
    @graphql.Args() args: MoveCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Move])
  async moves(@graphql.Args() args: MoveFindManyArgs): Promise<Move[]> {
    return this.service.moves(args);
  }

  @graphql.Query(() => Move, { nullable: true })
  async move(@graphql.Args() args: MoveFindUniqueArgs): Promise<Move | null> {
    const result = await this.service.move(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Move)
  async createMove(@graphql.Args() args: CreateMoveArgs): Promise<Move> {
    return await this.service.createMove({
      ...args,
      data: {
        ...args.data,

        pit: args.data.pit
          ? {
              connect: args.data.pit,
            }
          : undefined,

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Move)
  async updateMove(@graphql.Args() args: UpdateMoveArgs): Promise<Move | null> {
    try {
      return await this.service.updateMove({
        ...args,
        data: {
          ...args.data,

          pit: args.data.pit
            ? {
                connect: args.data.pit,
              }
            : undefined,

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Move)
  async deleteMove(@graphql.Args() args: DeleteMoveArgs): Promise<Move | null> {
    try {
      return await this.service.deleteMove(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Pit, {
    nullable: true,
    name: "pit",
  })
  async getPit(@graphql.Parent() parent: Move): Promise<Pit | null> {
    const result = await this.service.getPit(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  async getPlayer(@graphql.Parent() parent: Move): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
