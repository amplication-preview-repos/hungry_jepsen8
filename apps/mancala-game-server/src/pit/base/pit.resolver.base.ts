/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pit } from "./Pit";
import { PitCountArgs } from "./PitCountArgs";
import { PitFindManyArgs } from "./PitFindManyArgs";
import { PitFindUniqueArgs } from "./PitFindUniqueArgs";
import { CreatePitArgs } from "./CreatePitArgs";
import { UpdatePitArgs } from "./UpdatePitArgs";
import { DeletePitArgs } from "./DeletePitArgs";
import { MoveFindManyArgs } from "../../move/base/MoveFindManyArgs";
import { Move } from "../../move/base/Move";
import { Game } from "../../game/base/Game";
import { PitService } from "../pit.service";
@graphql.Resolver(() => Pit)
export class PitResolverBase {
  constructor(protected readonly service: PitService) {}

  async _pitsMeta(
    @graphql.Args() args: PitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pit])
  async pits(@graphql.Args() args: PitFindManyArgs): Promise<Pit[]> {
    return this.service.pits(args);
  }

  @graphql.Query(() => Pit, { nullable: true })
  async pit(@graphql.Args() args: PitFindUniqueArgs): Promise<Pit | null> {
    const result = await this.service.pit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pit)
  async createPit(@graphql.Args() args: CreatePitArgs): Promise<Pit> {
    return await this.service.createPit({
      ...args,
      data: {
        ...args.data,

        game: args.data.game
          ? {
              connect: args.data.game,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Pit)
  async updatePit(@graphql.Args() args: UpdatePitArgs): Promise<Pit | null> {
    try {
      return await this.service.updatePit({
        ...args,
        data: {
          ...args.data,

          game: args.data.game
            ? {
                connect: args.data.game,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pit)
  async deletePit(@graphql.Args() args: DeletePitArgs): Promise<Pit | null> {
    try {
      return await this.service.deletePit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Move], { name: "moves" })
  async findMoves(
    @graphql.Parent() parent: Pit,
    @graphql.Args() args: MoveFindManyArgs
  ): Promise<Move[]> {
    const results = await this.service.findMoves(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Game, {
    nullable: true,
    name: "game",
  })
  async getGame(@graphql.Parent() parent: Pit): Promise<Game | null> {
    const result = await this.service.getGame(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
