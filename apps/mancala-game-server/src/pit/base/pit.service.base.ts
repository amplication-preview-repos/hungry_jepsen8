/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Pit as PrismaPit,
  Move as PrismaMove,
  Game as PrismaGame,
} from "@prisma/client";

export class PitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PitCountArgs, "select">): Promise<number> {
    return this.prisma.pit.count(args);
  }

  async pits<T extends Prisma.PitFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PitFindManyArgs>
  ): Promise<PrismaPit[]> {
    return this.prisma.pit.findMany<Prisma.PitFindManyArgs>(args);
  }
  async pit<T extends Prisma.PitFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PitFindUniqueArgs>
  ): Promise<PrismaPit | null> {
    return this.prisma.pit.findUnique(args);
  }
  async createPit<T extends Prisma.PitCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PitCreateArgs>
  ): Promise<PrismaPit> {
    return this.prisma.pit.create<T>(args);
  }
  async updatePit<T extends Prisma.PitUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PitUpdateArgs>
  ): Promise<PrismaPit> {
    return this.prisma.pit.update<T>(args);
  }
  async deletePit<T extends Prisma.PitDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PitDeleteArgs>
  ): Promise<PrismaPit> {
    return this.prisma.pit.delete(args);
  }

  async findMoves(
    parentId: string,
    args: Prisma.MoveFindManyArgs
  ): Promise<PrismaMove[]> {
    return this.prisma.pit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .moves(args);
  }

  async getGame(parentId: string): Promise<PrismaGame | null> {
    return this.prisma.pit
      .findUnique({
        where: { id: parentId },
      })
      .game();
  }
}
